// js/recommender.js
class MovieRecommender {
    constructor() {
        this.users = {};
        this.movies = {};
        this.userRatings = {};
        this.movieFeatures = {};
        this.genres = [];
    }

    // Load data from files (you'll need to implement file loading based on your environment)
    async loadData() {
        try {
            // Load ratings data
            const ratingsData = await this.loadFile('data/u.data');
            this.parseRatings(ratingsData);
            
            // Load movie data
            const moviesData = await this.loadFile('data/u.item');
            this.parseMovies(moviesData);
            
            // Load user data (optional for demographic filtering)
            const usersData = await this.loadFile('data/u.user');
            this.parseUsers(usersData);
            
            console.log('Data loaded successfully');
            console.log(`Users: ${Object.keys(this.users).length}`);
            console.log(`Movies: ${Object.keys(this.movies).length}`);
            console.log(`Ratings: ${Object.values(this.userRatings).flat().length}`);
            
        } catch (error) {
            console.error('Error loading data:', error);
        }
    }

    // Parse ratings data
    parseRatings(data) {
        const lines = data.split('\n');
        lines.forEach(line => {
            if (line.trim()) {
                const [userId, movieId, rating, timestamp] = line.split('\t');
                if (userId && movieId && rating) {
                    if (!this.userRatings[userId]) {
                        this.userRatings[userId] = [];
                    }
                    this.userRatings[userId].push({
                        movieId,
                        rating: parseFloat(rating),
                        timestamp: parseInt(timestamp)
                    });
                }
            }
        });
    }

    // Parse movie data and extract features
    parseMovies(data) {
        const lines = data.split('\n');
        lines.forEach(line => {
            if (line.trim()) {
                const parts = line.split('|');
                if (parts.length >= 24) {
                    const movieId = parts[0];
                    const title = parts[1];
                    const genres = parts.slice(5, 24).map(g => parseInt(g));
                    
                    this.movies[movieId] = {
                        title,
                        genres
                    };
                    
                    // Store movie features for similarity calculation
                    this.movieFeatures[movieId] = genres;
                }
            }
        });
    }

    // Parse user data (optional)
    parseUsers(data) {
        const lines = data.split('\n');
        lines.forEach(line => {
            if (line.trim()) {
                const [userId, age, gender, occupation, zipCode] = line.split('|');
                this.users[userId] = {
                    age: parseInt(age),
                    gender,
                    occupation,
                    zipCode
                };
            }
        });
    }

    // Calculate cosine similarity between two vectors
    cosineSimilarity(vecA, vecB) {
        if (vecA.length !== vecB.length) {
            throw new Error('Vectors must have the same length');
        }
        
        let dotProduct = 0;
        let magnitudeA = 0;
        let magnitudeB = 0;
        
        for (let i = 0; i < vecA.length; i++) {
            dotProduct += vecA[i] * vecB[i];
            magnitudeA += vecA[i] * vecA[i];
            magnitudeB += vecB[i] * vecB[i];
        }
        
        magnitudeA = Math.sqrt(magnitudeA);
        magnitudeB = Math.sqrt(magnitudeB);
        
        if (magnitudeA === 0 || magnitudeB === 0) {
            return 0;
        }
        
        return dotProduct / (magnitudeA * magnitudeB);
    }

    // Create user profile based on rated movies
    createUserProfile(userId) {
        const ratings = this.userRatings[userId];
        if (!ratings || ratings.length === 0) {
            return null;
        }
        
        // Initialize user profile vector (same length as genre vector)
        const profile = new Array(19).fill(0);
        let totalWeight = 0;
        
        ratings.forEach(rating => {
            const movieFeatures = this.movieFeatures[rating.movieId];
            if (movieFeatures) {
                const weight = rating.rating / 5.0; // Normalize rating to 0-1
                movieFeatures.forEach((feature, index) => {
                    profile[index] += feature * weight;
                });
                totalWeight += weight;
            }
        });
        
        // Normalize the profile
        if (totalWeight > 0) {
            return profile.map(value => value / totalWeight);
        }
        
        return profile;
    }

    // Get recommendations for a user
    getRecommendations(userId, topN = 10) {
        const userProfile = this.createUserProfile(userId);
        if (!userProfile) {
            return [];
        }
        
        const userRatedMovies = new Set(
            this.userRatings[userId].map(r => r.movieId)
        );
        
        const scores = [];
        
        // Calculate similarity for each movie the user hasn't rated
        Object.keys(this.movieFeatures).forEach(movieId => {
            if (!userRatedMovies.has(movieId)) {
                const movieVector = this.movieFeatures[movieId];
                const similarity = this.cosineSimilarity(userProfile, movieVector);
                scores.push({
                    movieId,
                    similarity,
                    title: this.movies[movieId]?.title || 'Unknown'
                });
            }
        });
        
        // Sort by similarity score (descending)
        scores.sort((a, b) => b.similarity - a.similarity);
        
        return scores.slice(0, topN);
    }

    // Find similar users based on rating patterns
    findSimilarUsers(userId, topN = 5) {
        const targetUserRatings = this.userRatings[userId];
        if (!targetUserRatings) return [];
        
        const similarities = [];
        
        Object.keys(this.userRatings).forEach(otherUserId => {
            if (otherUserId !== userId) {
                const similarity = this.userSimilarity(userId, otherUserId);
                similarities.push({
                    userId: otherUserId,
                    similarity
                });
            }
        });
        
        similarities.sort((a, b) => b.similarity - a.similarity);
        return similarities.slice(0, topN);
    }

    // Calculate similarity between two users
    userSimilarity(userId1, userId2) {
        const ratings1 = this.userRatings[userId1];
        const ratings2 = this.userRatings[userId2];
        
        // Create rating vectors for common movies
        const commonMovies = {};
        
        ratings1.forEach(r1 => {
            commonMovies[r1.movieId] = { rating1: r1.rating };
        });
        
        ratings2.forEach(r2 => {
            if (commonMovies[r2.movieId]) {
                commonMovies[r2.movieId].rating2 = r2.rating;
            }
        });
        
        // Extract vectors for common movies
        const vec1 = [];
        const vec2 = [];
        
        Object.values(commonMovies).forEach(movie => {
            if (movie.rating1 !== undefined && movie.rating2 !== undefined) {
                vec1.push(movie.rating1);
                vec2.push(movie.rating2);
            }
        });
        
        if (vec1.length < 2) return 0; // Not enough common ratings
        
        return this.cosineSimilarity(vec1, vec2);
    }

    // File loading helper (implementation depends on environment)
    async loadFile(filename) {
        // This is a placeholder - implementation depends on your environment
        // For Node.js: use fs module
        // For browser: use fetch API or FileReader
        
        // Example for browser with fetch:
        try {
            const response = await fetch(filename);
            if (!response.ok) throw new Error('Network response was not ok');
            return await response.text();
        } catch (error) {
            console.error('Error loading file:', error);
            throw error;
        }
    }
}

// Usage example
async function initializeRecommender() {
    const recommender = new MovieRecommender();
    await recommender.loadData();
    
    // Example: Get recommendations for user 1
    const recommendations = recommender.getRecommendations('1', 10);
    console.log('Top recommendations for user 1:');
    recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec.title} (similarity: ${rec.similarity.toFixed(3)})`);
    });
    
    // Example: Find similar users
    const similarUsers = recommender.findSimilarUsers('1', 5);
    console.log('\nUsers similar to user 1:');
    similarUsers.forEach((user, index) => {
        console.log(`${index + 1}. User ${user.userId} (similarity: ${user.similarity.toFixed(3)})`);
    });
    
    return recommender;
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MovieRecommender;
}
